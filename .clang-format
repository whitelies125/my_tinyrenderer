---
Language: Cpp
# 基于 Google Style
BasedOnStyle:  Google

# 设置缩进为 4 空格
IndentWidth: 4
# 允许使用一些双 brackets，如
# 使用 std::vector<std::vector<int>>
# 而非 std::vector<std::vector<int> >
Standard: Cpp11
# 设置一行代码最大长度
ColumnLimit: 100
# 使用 char *ptr; string &str
# 而非 char* ptr; string& str
PointerAlignment: Right
# 设置在 C++11 用于初始化一个对象的括号列表前插入一个空格
# false: int a{0};
#        string str{"hello world"};
# true : int a {0};
#        string str {"hello world"};
SpaceBeforeCpp11BracedList: true

# 设置访问修饰符 public: private: protect: 不参与缩进
IndentAccessModifiers: false
# 设置访问修饰符缩进相对于类成员偏移为 -4
AccessModifierOffset: -4
#
# 自定义在某些位置的大括号是否换行
BreakBeforeBraces: Custom
BraceWrapping:
  # case 1: {<-该括号是否换行
  AfterCaseLabel: false
  # Class Test: {<-该括号是否换行
  AfterClass: false
  # if/for/while/switch/... (condition) {<-该括号是否换行
  AfterControlStatement: false
  # enum ENUM {<-该括号是否换行
  AfterEnum: false
  # void function {<-该括号是否换行
  AfterFunction: true
  # namespace NAME {<-该括号是否换行
  AfterNamespace: false
  # struct Test: {<-该括号是否换行
  AfterStruct: false
  # union Test: {<-该括号是否换行
  AfterUnion: false
  # extern "C" {<-该括号是否换行
  AfterExternBlock: false
  # }<-该括号是否换行 catch {
  BeforeCatch: false
  # }<-该括号是否换行 else {
  BeforeElse: false
  # func([](){<-该括号是否换行...})
  BeforeLambdaBody: false
  # do {
  #   ...
  # }<-该括号是否换行 while(1);
  BeforeWhile: false
  # 沒明白做什么的，但是实测设为 true 缩进并不好看
  IndentBraces: false
  # void function
  # {}<-空函数时，该括号是否换行
  SplitEmptyFunction: false
  # class/struct/union Test
  # { }<-空 class/sturct/union 时，该括号是否换行
  SplitEmptyRecord: false
  # namespace NAME
  # {}<-空命名空间时，该括号是否换行
  SplitEmptyNamespace: false

# 对单行的 if else 将其放置在一行，不换行
# if (a < 1) return;
# 带有 {} 则换行
# if (a < 1) {
#     return
# }
AllowShortIfStatementsOnASingleLine: AllIfsAndElse
# 为 false: 每个枚举单独换行
# 为 true: 多个短枚举可能会在同一行
AllowShortEnumsOnASingleLine: false
...
